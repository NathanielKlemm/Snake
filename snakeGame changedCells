<html>
<head>
<title>Snake Game</title>
<style>
body { text-align: center; }
canvas { background:#2040C0; }
</style>
</head>
<body>
<canvas id="canvas" width="512px" height="512px"></canvas>
<script>
var canvas = document.getElementById("canvas"),
	context = canvas.getContext("2d"),
	gridSize = 32, //number of rows/columns in the (square) grid;
//note that the grid's origin is the center of the canvas, so the edges are all half a column/row
	cellSize = canvas.width/gridSize, //height/width in pixels of a (square) cell
	cells = []; //(gridSize+1)x(gridSize+1) array of cells;
//cells[0][0] is x=-16,y=-16; cells[16][16] is x=0,y=0; cells[32][32] is x=16,y=16
	
function Vector(xValue,yValue) {
	this.x = xValue;
	this.y = yValue;
}

function Cell(isWall,isSnake) {
	//this.position = position;
	this.isWall = isWall;
	this.isSnake = isSnake;
}

for (var col = 0; col <= gridSize; col++) {
	cells[col] = [];
	for (var row = 0; row <= gridSize; row++) {
		cells[col][row] = new Cell(false,false);
	}
}

/*for (var w = 0; w < 14; w++) {
	cells[gridSize/2-5][gridSize/2+11-w].isWall = true;
}*/

for (var row = 0; row <= gridSize; row++) {
	cells[0][row].isWall = true;
	cells[gridSize][row].isWall = true;
}

for (var col = 0; col <= gridSize; col++) {
	cells[col][0].isWall = true;
	cells[col][gridSize].isWall = true;
}

function Food(count,location) {
	this.count = count;
	this.location = location;
	this.increment = function() {
		this.count++;
		this.location.x = Math.floor(Math.random()*gridSize - gridSize/2);
		this.location.y = Math.floor(Math.random()*gridSize - gridSize/2);
	}
	this.draw = function() {
		/*context.beginPath();
		context.moveTo((this.location.x - 0.5)*cellSize, (this.location.y + 0.5)*cellSize); //upper left corner
		context.lineTo((this.location.x - 0.5)*cellSize, (this.location.y - 0.5)*cellSize); //lower left corner
		context.lineTo((this.location.x + 0.5)*cellSize, (this.location.y - 0.5)*cellSize); //lower right corner
		context.lineTo((this.location.x + 0.5)*cellSize, (this.location.y + 0.5)*cellSize); //upper right corner
		context.closePath();
		context.stroke();*/
		context.fillStyle = "#ffff00";
		context.save();
		context.transform(1,0,0,-1,0,0);
		context.font = "10px Arial";
		context.fillText(this.count,(this.location.x-.25)*cellSize,-(this.location.y-0.25)*cellSize);
		context.restore();
	}
}

function Player(startPosition,currentPosition,direction,length,color,body,full) {
	this.start = startPosition;
	this.position = currentPosition;
	this.direction = direction;
	this.length = length;
	this.color = color;
	this.body = body;
	this.full = full;
	this.draw = function () {
		context.fillStyle = this.color;
		for (b = 0; b < this.length; b++) {
			context.beginPath();
			context.moveTo((this.body[b].x - 0.5)*cellSize, (this.body[b].y + 0.5)*cellSize); //upper left corner
			context.lineTo((this.body[b].x - 0.5)*cellSize, (this.body[b].y - 0.5)*cellSize); //lower left corner
			context.lineTo((this.body[b].x + 0.5)*cellSize, (this.body[b].y - 0.5)*cellSize); //lower right corner
			context.lineTo((this.body[b].x + 0.5)*cellSize, (this.body[b].y + 0.5)*cellSize); //upper right corner
			context.fill();
		}
	}
	this.turn = function(dir) {
		if (dir == 37) {
			this.direction.x = -1;
			this.direction.y = 0;
		}
		else if (dir == 38) {
			this.direction.x = 0;
			this.direction.y = 1;
		}
		else if (dir == 39) {
			this.direction.x = 1;
			this.direction.y = 0;
		}
		else if (dir == 40) {
			this.direction.x = 0;
			this.direction.y = -1;
		}
		draw();
	}
	this.act = function() {
		var changedCells = [];
		if (this.full) {
			changedCells = this.grow();
		}
		else {
			changedCells = this.move();
		}
		return changedCells;
	}
	this.move = function() {
		var changedCells = [];
			x = this.body[this.length - 1].x,
			y = this.body[this.length - 1].y;
		changedCells[0] = new Vector(x,y);
		for (var b = 0; b < this.length - 1; b++) {
			this.body[this.length - b - 1].x = this.body[this.length - b - 2].x;
			this.body[this.length - b - 1].y = this.body[this.length - b - 2].y;
		}
		this.body[0].x += this.direction.x;
		this.body[0].y += this.direction.y;
		x = this.body[0].x;
		y = this.body[0].y;
		changedCells[1] = new Vector(x,y);
		return changedCells;
	}
	this.eat = function() {
		this.full = true;
	}
	this.grow = function() {
		var changedCells = [];
		changedCells[0] = new Vector(-gridSize/2,-gridSize/2);
		
		this.length *= 2;
		this.body[this.length - 1] = new Vector(0,0);
		for (var b = 0; b < this.length - 1; b++) {
			this.body[this.length - b - 1].x = this.body[this.length - b - 2].x;
			this.body[this.length - b - 1].y = this.body[this.length - b - 2].y;
		}
		this.body[0].x += this.direction.x;
		this.body[0].y += this.direction.y;
		this.full = false;
		
		var x = this.body[0].x,
			y = this.body[0].y;
		changedCells[1] = new Vector(x,y);
		return changedCells;
	}
}

function drawGrid() {		
	for (var c = 1; c < gridSize; c++) {
		context.beginPath();
		context.moveTo(c*cellSize - canvas.width/2,canvas.height/2);
		context.lineTo(c*cellSize - canvas.width/2,-canvas.height/2);
		context.stroke();
	}
	for (var r = 1; r < gridSize; r++) {
		context.beginPath();
		context.moveTo(-canvas.width/2,r*cellSize - canvas.height/2);
		context.lineTo(canvas.height/2,r*cellSize - canvas.height/2);
		context.stroke();
	}
}

function drawWalls() {
	context.fillStyle = "#000000";
	for (col = -gridSize/2; col <= gridSize/2; col++) {
		for (row = -gridSize/2; row <= gridSize/2; row++) {
			if (cells[col+gridSize/2][row+gridSize/2].isWall) {
				context.beginPath();
				context.moveTo((col - 0.5)*cellSize, (row + 0.5)*cellSize); //upper left corner
				context.lineTo((col - 0.5)*cellSize, (row - 0.5)*cellSize); //lower left corner
				context.lineTo((col + 0.5)*cellSize, (row - 0.5)*cellSize); //lower right corner
				context.lineTo((col + 0.5)*cellSize, (row + 0.5)*cellSize); //upper right corner
				context.fill();
			}
		}
	}
}

loc = new Vector(Math.floor(Math.random()*gridSize - gridSize/2),Math.floor(Math.random()*gridSize - gridSize/2));
nibble = new Food(1,loc);

pos = new Vector(0,0);
velocity = new Vector(-1,0);
player1 = new Player(pos,pos,velocity,1,"#ffff00",[pos],false);

context.transform(1,0,0,-1,canvas.width/2,canvas.height/2);

function keyDown(event) {
	var key = event.keyCode;
	if (key <= 40 && key >= 37) {
		player1.turn(key);
	}
}

document.addEventListener("keydown",keyDown,false);

function draw() {
	context.clearRect(-canvas.width/2,canvas.height/2,canvas.width,-canvas.height);
	drawWalls();
	nibble.draw();
	player1.draw();
}

function play() {
	var changedCells = player1.act();
	cells[changedCells[0].x][changedCells[0].y].isSnake = false;
	cells[changedCells[1].x][changedCells[1].y].isSnake = true;
	
	if (player1.body[0].x == nibble.location.x && player1.body[0].y == nibble.location.y) {
		nibble.increment();
		player1.eat();
		if (nibble.count > 10) {
			
		}
	}
	draw();
	
	if (!cells[player1.body[0].x + gridSize/2][player1.body[0].y + gridSize/2].isWall) {
		window.setTimeout(play,1000/10);
	}
	else {
		context.transform(1,0,0,-1,0,0);
		context.fillStyle = "#000000";
		context.font = "30px Arial";
		context.fillText("Game Over",-canvas.width/7,-10);
	}
}

draw();
play();

</script>
</body>
</html>